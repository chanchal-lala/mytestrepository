<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" total="6" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Main Test Suite" duration-ms="18084" started-at="2020-03-30T00:27:31Z" finished-at="2020-03-30T00:27:49Z">
    <groups>
    </groups>
    <test name="Test" duration-ms="17234" started-at="2020-03-30T00:27:31Z" finished-at="2020-03-30T00:27:48Z">
      <class name="example.NewTest">
        <test-method status="PASS" signature="beforeTest()[pri:0, instance:example.NewTest@527740a2]" name="beforeTest" is-config="true" duration-ms="4177" started-at="2020-03-30T05:57:31Z" finished-at="2020-03-30T05:57:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest -->
        <test-method status="PASS" signature="testEasy()[pri:0, instance:example.NewTest@527740a2]" name="testEasy" duration-ms="12227" started-at="2020-03-30T05:57:35Z" finished-at="2020-03-30T05:57:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEasy -->
        <test-method status="PASS" signature="afterTest()[pri:0, instance:example.NewTest@527740a2]" name="afterTest" is-config="true" duration-ms="812" started-at="2020-03-30T05:57:47Z" finished-at="2020-03-30T05:57:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest -->
      </class> <!-- example.NewTest -->
    </test> <!-- Test -->
    <test name="Extent Report Test" duration-ms="835" started-at="2020-03-30T00:27:48Z" finished-at="2020-03-30T00:27:49Z">
      <class name="extentreport.BasicExtentReport">
        <test-method status="PASS" signature="startReport(java.lang.String, java.lang.String)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="startReport" is-config="true" duration-ms="125" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[Windows]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="getResult" is-config="true" duration-ms="16" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase1 status=SUCCESS method=BasicExtentReport.testCase1()[pri:0, instance:extentreport.BasicExtentReport@887af79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase1()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="testCase1" duration-ms="0" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method status="PASS" signature="testCase2()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="testCase2" duration-ms="0" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="getResult" is-config="true" duration-ms="5" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase2 status=SUCCESS method=BasicExtentReport.testCase2()[pri:0, instance:extentreport.BasicExtentReport@887af79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase3()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="testCase3" duration-ms="2" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase3 -->
        <test-method status="FAIL" signature="testCase4()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="testCase4" duration-ms="0" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:496)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at extentreport.BasicExtentReport.testCase4(BasicExtentReport.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase4 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="getResult" is-config="true" duration-ms="0" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase3 status=SUCCESS method=BasicExtentReport.testCase3()[pri:0, instance:extentreport.BasicExtentReport@887af79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="getResult" is-config="true" duration-ms="16" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase4 status=FAILURE method=BasicExtentReport.testCase4()[pri:0, instance:extentreport.BasicExtentReport@887af79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="getResult" is-config="true" duration-ms="15" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase5 status=SKIP method=BasicExtentReport.testCase5()[pri:0, instance:extentreport.BasicExtentReport@887af79] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="testCase5()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="testCase5" duration-ms="0" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:48Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping this test with exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping this test with exception
	at extentreport.BasicExtentReport.testCase5(BasicExtentReport.java:81)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:639)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase5 -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:extentreport.BasicExtentReport@887af79]" name="tearDown" is-config="true" duration-ms="578" started-at="2020-03-30T05:57:48Z" finished-at="2020-03-30T05:57:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- extentreport.BasicExtentReport -->
    </test> <!-- Extent Report Test -->
  </suite> <!-- Main Test Suite -->
</testng-results>
